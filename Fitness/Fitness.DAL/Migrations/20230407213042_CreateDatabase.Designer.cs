// <auto-generated />
using System;
using Fitness.DAL.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fitness.DAL.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
<<<<<<<< HEAD:Fitness/Fitness.DAL/Migrations/20230408081204_UpdateDatabase.Designer.cs
    [Migration("20230408081204_UpdateDatabase")]
    partial class UpdateDatabase
|||||||| cb6eb68:Fitness/Fitness.DAL/Migrations/20230401195850_CreateDatabase.Designer.cs
    [Migration("20230401195850_CreateDatabase")]
    partial class CreateDatabase
========
    [Migration("20230407213042_CreateDatabase")]
    partial class CreateDatabase
>>>>>>>> origin/uzo/UserGoal:Fitness/Fitness.DAL/Migrations/20230407213042_CreateDatabase.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AchievementFitFamer", b =>
                {
                    b.Property<Guid>("AchievementsUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FitFamersUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AchievementsUniqueIdentifier", "FitFamersUniqueIdentifier");

                    b.HasIndex("FitFamersUniqueIdentifier");

                    b.ToTable("AchievementFitFamer");
                });

            modelBuilder.Entity("ExerciseFitFamer", b =>
                {
                    b.Property<Guid>("ExercisesUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FitFamersUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExercisesUniqueIdentifier", "FitFamersUniqueIdentifier");

                    b.HasIndex("FitFamersUniqueIdentifier");

                    b.ToTable("ExerciseFitFamer");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.Achievement", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.Exercise", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.FitFamer", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("CurrentWeight")
                        .HasColumnType("float");

                    b.Property<int>("ExerciseExperienceLevel")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkOutId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkOutUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UniqueIdentifier");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkOutUniqueIdentifier");

                    b.ToTable("FitFamers");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.FoodStuff", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmtConsumed")
                        .HasColumnType("int");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FitFamerUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FoodClass")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<Guid?>("MealLogUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.HasIndex("FitFamerUniqueIdentifier");

                    b.HasIndex("MealLogUniqueIdentifier");

                    b.ToTable("FoodStuffs");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.MealLog", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MealTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.ToTable("MealPlanLogs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MealLog");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Fitness.DAL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserAchievement", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AchievementId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AchievementUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FitFamerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FitFamerUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.HasIndex("AchievementUniqueIdentifier");

                    b.HasIndex("FitFamerUniqueIdentifier");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserGoal", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpectedDailyCalorieBurnt")
                        .HasColumnType("int");

                    b.Property<int>("ExpectedDailyCalorieIntake")
                        .HasColumnType("int");

                    b.Property<string>("FitFamerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FitFamerUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GoalType")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TargetWeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.HasIndex("FitFamerUniqueIdentifier");

                    b.ToTable("UserGoals");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.WorkOut", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("LiveWeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UniqueIdentifier");

                    b.ToTable("WorkOuts");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.WorkOutExercise", b =>
                {
                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExerciseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IntensityLevel")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkOutId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WorkOutUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UniqueIdentifier");

                    b.HasIndex("ExerciseUniqueIdentifier");

                    b.HasIndex("WorkOutUniqueIdentifier");

                    b.ToTable("WorkOutExercises");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<<< HEAD:Fitness/Fitness.DAL/Migrations/20230408081204_UpdateDatabase.Designer.cs
                            Id = "aa2eff25-9f44-4892-99ea-ef05bdac4290",
                            ConcurrencyStamp = "98094185-0414-48d0-af85-d1bd9a8788d0",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "d539a8dd-2132-4a0d-a4ac-4237d4afe929",
                            ConcurrencyStamp = "c188e339-e332-4144-a9d1-e541bb672eec",
|||||||| cb6eb68:Fitness/Fitness.DAL/Migrations/20230401195850_CreateDatabase.Designer.cs
                            Id = "bb5831e4-819c-4ee6-b679-abf66bbe07d4",
                            ConcurrencyStamp = "b49b2d61-174d-4eca-a46c-8590cab22e08",
========
                            Id = "c704771d-e8f3-4500-8c99-91e27dac2189",
                            ConcurrencyStamp = "3f01fe12-f647-4785-b2fd-0393d6018dc7",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "b5add0da-72bb-4220-a8a2-d02ff04ef629",
                            ConcurrencyStamp = "fe2fe752-4a1c-4c57-a24b-5d0a51d74aa9",
>>>>>>>> origin/uzo/UserGoal:Fitness/Fitness.DAL/Migrations/20230407213042_CreateDatabase.Designer.cs
                            Name = "FitFamer",
                            NormalizedName = "FITFAMER"
                        },
                        new
                        {
<<<<<<<< HEAD:Fitness/Fitness.DAL/Migrations/20230408081204_UpdateDatabase.Designer.cs
                            Id = "6f86c266-58c0-48e7-a38c-6edf39183523",
                            ConcurrencyStamp = "fe310517-ef6c-441c-b11e-38140657fb0b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
|||||||| cb6eb68:Fitness/Fitness.DAL/Migrations/20230401195850_CreateDatabase.Designer.cs
                            Id = "caff8f0f-ea65-4659-9fd2-7311e7a091d3",
                            ConcurrencyStamp = "4a973e57-9fbe-4e93-b03f-9967342de8fc",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
========
                            Id = "7607dbda-2c9e-4256-a65e-5f7f26169407",
                            ConcurrencyStamp = "e44bae40-4988-4d34-a652-a5ca25441a40",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
>>>>>>>> origin/uzo/UserGoal:Fitness/Fitness.DAL/Migrations/20230407213042_CreateDatabase.Designer.cs
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserMealLog", b =>
                {
                    b.HasBaseType("Fitness.DAL.Entities.MealLog");

                    b.Property<string>("FitFamerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FitFamerUniqueIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FitFamerUniqueIdentifier");

                    b.HasDiscriminator().HasValue("UserMealLog");
                });

            modelBuilder.Entity("AchievementFitFamer", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.FitFamer", null)
                        .WithMany()
                        .HasForeignKey("FitFamersUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseFitFamer", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.FitFamer", null)
                        .WithMany()
                        .HasForeignKey("FitFamersUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness.DAL.Entities.FitFamer", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.WorkOut", "WorkOut")
                        .WithMany("FitFamers")
                        .HasForeignKey("WorkOutUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkOut");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.FoodStuff", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.FitFamer", null)
                        .WithMany("FoodStuff")
                        .HasForeignKey("FitFamerUniqueIdentifier");

                    b.HasOne("Fitness.DAL.Entities.MealLog", null)
                        .WithMany("FoodStuffs")
                        .HasForeignKey("MealLogUniqueIdentifier");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserAchievement", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.FitFamer", "FitFamer")
                        .WithMany()
                        .HasForeignKey("FitFamerUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("FitFamer");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserGoal", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.FitFamer", "FitFamer")
                        .WithMany("UserGoals")
                        .HasForeignKey("FitFamerUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitFamer");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.WorkOutExercise", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.WorkOut", "WorkOut")
                        .WithMany()
                        .HasForeignKey("WorkOutUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkOut");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fitness.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fitness.DAL.Entities.UserMealLog", b =>
                {
                    b.HasOne("Fitness.DAL.Entities.FitFamer", "FitFamer")
                        .WithMany("UserMealLogs")
                        .HasForeignKey("FitFamerUniqueIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitFamer");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.FitFamer", b =>
                {
                    b.Navigation("FoodStuff");

                    b.Navigation("UserGoals");

                    b.Navigation("UserMealLogs");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.MealLog", b =>
                {
                    b.Navigation("FoodStuffs");
                });

            modelBuilder.Entity("Fitness.DAL.Entities.WorkOut", b =>
                {
                    b.Navigation("FitFamers");
                });
#pragma warning restore 612, 618
        }
    }
}
